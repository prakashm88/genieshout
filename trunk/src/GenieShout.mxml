<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="550" height="350"
					   initialize="init()"
					   xmlns:chat="com.itechgenie.chat.pages.*" 
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   >
	
	<fx:Declarations>		
		<mx:HTTPService id="groupUpdater" method="GET" resultFormat="text"
						showBusyCursor="true" />
	</fx:Declarations>
	
	<fx:Style source="/assets/css/genieshout.css"/>
	
	<fx:Script>
		<![CDATA[
			import com.itechgenie.chat.vo.GenieShoutVO;
			import com.itechgenie.chat.util.Utility;
			import com.itechgenie.chat.dao.GenieShoutDAO;
			import com.itechgenie.chat.pages.AboutPage;
			import com.itechgenie.chat.pages.SettingsPage;
			import com.itechgenie.chat.versioning.AutoVersion;
			import com.itechgenie.chat.versioning.GenieUpdater;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var version:AutoVersion = new AutoVersion(1,0,9);
			
			[Bindable]
			public var autoUpdate:int = 1; 
			
			[Bindable]
			public var groupName:ArrayCollection;
			
			private var _serverIP:String = null ;
			
			 [Bindable]
			public var showMachineID:Boolean = true ;
			[Bindable]
			public var showTime:Boolean = true ; 
			
			[Bindable]
			public var groupNameValue:String ;
			[Bindable]
			private var ipAddress:String ;			
			
			[Bindable]
			private var gpLoader:URLLoader;
			[Bindable]
			private var groupXMLColn:XMLListCollection;
			private var myXml:XML;
			
			[Bindable]
			public var machineID: String ;
			
			[Bindable]
			public var genieShoutDAO:GenieShoutDAO = new GenieShoutDAO();
			
			[Bindable]
			public var genieShoutDTO:GenieShoutVO = new GenieShoutVO();
			
			public function updateGroupsName(event:Event = null):void
			{
				trace("serverIpChange event: " + serverIP); 
				genieShoutDAO.insertOrUpdateIP(serverIP, autoUpdate) ;
				var netInterfaces:* = NetworkInfo.networkInfo.findInterfaces();			
				var addresses:* = netInterfaces[0].addresses;				
				ipAddress = addresses[0].address;				
				var verNo:String = NativeApplication.nativeApplication.runtimeVersion ;
				var requestedURL:String = "http://"+ serverIP +"/genieshout/getGroupNames.php?ipAddress=" + ipAddress + "&versionNo=" + verNo;
				var gpReq:URLRequest = new URLRequest(requestedURL);				
				gpLoader = new URLLoader();
				gpLoader.addEventListener(Event.COMPLETE, fillGroupNames);
				gpLoader.addEventListener(IOErrorEvent.IO_ERROR, reportError );
				cursorManager.setBusyCursor();
				gpLoader.load(gpReq);					
			}
			
			public function get serverIP():String
			{
				trace("Reading IP Address: "+ _serverIP) ;
				return _serverIP;
			}			
			
			[Bindable]
			public function set serverIP(value:String):void
			{
				trace("IP Address updated: " + value) ;
				_serverIP = value;
				genieShoutDTO.serverIP = value;
				this.dispatchEvent(new Event("serverIpChange"));
			}
			
			protected function button1_clickHandler(event:Event):void
			{	
				var bool:Boolean = checkServerIP() ; 
				trace("init method return val: " + bool) ;
				if(bool)
				{
					if(userName.text != "" )
					{
						if(groupCombo.selectedIndex != 0)
						{
							trace(groupCombo.selectedItem) ;
							trace(userName.text );							
							//genieShoutDTO = new GenieShoutVO();
							if(genieShoutDTO.userName != userName.text)
							{
								var genieObj:GenieShoutVO = genieShoutDAO.getUserByName(userName.text,machineID, ipAddress, serverIP);
								if(genieObj==null)
								{
									genieShoutDTO.id = 0;								
									genieShoutDTO.showTime = "true";
									genieShoutDTO.showMachineID = "true" ;
									genieShoutDTO.textColor = "000000" ;
								}
								else
								{
									genieShoutDTO.id = genieObj.id;										
									genieShoutDTO.showTime = genieObj.showTime ;
									genieShoutDTO.showMachineID = genieObj.showMachineID ;
									genieShoutDTO.textColor = genieObj.textColor ; 					
								}
							}
							
							trace("TRace of id: "+genieShoutDTO.id);
							genieShoutDTO.userName = userName.text ;
							genieShoutDTO.groupName = groupNameValue ;
							genieShoutDTO.remLogin = rememberLogin.selected.toString();
							genieShoutDTO.serverIP = serverIP ;
							genieShoutDTO.machineIP = ipAddress ;
							genieShoutDTO.machineID = machineID ;
							
							genieShoutDAO.insertOrUpdateData(genieShoutDTO);							
							screenStack.selectedIndex=1;
						}
						else
						{
							Alert.show("Select Group Name.");
						}
					}
					else
					{
						Alert.show("Enter User Name.");
					}
				}
			}
			
			private function alertListener(eventObj:CloseEvent):void {
				// Check to see if the OK button was pressed.
				if (eventObj.detail==Alert.OK) {
					var settingsPopUP:SettingsPage=SettingsPage(PopUpManager.createPopUp(this, SettingsPage, true));
					PopUpManager.centerPopUp(settingsPopUP);
				}
			}
			
			private function checkServerIP():Boolean
			{	
				var tempOjb:Object = genieShoutDAO.getIPData() ; 
				if(tempOjb == null) serverIP = null ;
				else
				{
					serverIP = tempOjb.ipAddress;
					autoUpdate = tempOjb.autoUpdate;
				}
				if( serverIP == null )
				{
					var presentation:File = File.applicationDirectory.resolvePath("assets/html/readme.html");
					var alertText:String = "<a href='" + presentation.nativePath + "'>Kindly fill in the server IP in the Setting page. Click here to view the Readme file.</a>" ;					
					var alert:Alert = Alert.show(alertText, "Alert !!",
						Alert.OK | Alert.CANCEL, this,
						alertListener, null, Alert.OK);
					alert.mx_internal::alertForm.mx_internal::textField.htmlText = alertText;
					return false;
				}
				else
				{	if(autoUpdate) GenieUpdater.checkForUpdate() ;
					updateGroupsName();					
					return true ;
				}				
			}
			
			private function checkPreviousSettings():void
			{						
				/* 	genieDAO.genieShoutVO = genieDTO ;
				genieDAO.checkDBExist() ;
				genieDAO.insertDataToDB() ;	 				
				genieShoutDAO.createShoutDB();	*/				
				genieShoutDTO = genieShoutDAO.getLastLoggedUser(machineID, ipAddress, serverIP );
				//genieShoutDAO.insertData(genieShoutDTO);
				if("true" == genieShoutDTO.remLogin)
				{
					userName.text = genieShoutDTO.userName  ;
					groupNameValue = genieShoutDTO.groupName ;
					
					var gpIndex:int = 0;
					for each(var gpObj:Object in groupName)
					{
						if(gpObj.name == genieShoutDTO.groupName)
						{
							break;
						}
						gpIndex++; 
					}					
					groupCombo.selectedIndex = gpIndex ;					
				}
			/* 	else
				{
					genieShoutDTO.showTime = "true" ;
					genieShoutDTO.showMachineID = "true" ;					
				} */
			}
			
			public function init():void
			{	
				this.addEventListener("serverIpChange", updateGroupsName);					
				machineID =  File.userDirectory.name ;
				genieShoutDAO.createIPDB() ;
				genieShoutDAO.createShoutDB() ;
			}
			
			protected function reportError(event:Event):void
			{				
				cursorManager.removeBusyCursor();
				Alert.show("Exception occured while fetching Group list. Please contact administrator.");
			}
			
			private function fillGroupNames(e:Event):void
			{
				groupName = new ArrayCollection();
				if(gpLoader.data != null )
				{
					trace("XML content: " +gpLoader.data.toString());				
					myXml = new XML(gpLoader.data.toString());
					var tempGroupProvider:XMLListCollection = new XMLListCollection(myXml..group);
					trace("Temp Chat: " + tempGroupProvider.toString()) ;
					
					if(myXml.toString() == 0)
					{
						trace("No new Data.") ;					
					}
					else
					{						
						var newObj:Object = new Object();						
						newObj.name = "select";
						newObj.label = "Select";
						groupName.addItemAt(newObj,0);
						for (var itr:* in tempGroupProvider)
						{
							newObj = new Object();
							newObj.name = tempGroupProvider.getItemAt(itr).name ;
							newObj.label = tempGroupProvider.getItemAt(itr).label ;
							groupName.addItem(newObj);
						}						
						userName.enabled = true ;
						groupCombo.selectedIndex = 0;
						groupCombo.enabled = true ;
					}				
				}
				checkPreviousSettings();
				cursorManager.removeBusyCursor();				
			}
			
			private function writeVersionNumber():void
			{
				var result:String = "";
				result += 'Version String:' + version
				
				result += '\nMajor: ' + version.major;
				result += '\nMinor: ' + version.minor; 
				result += '\nRev: ' + version.revision;
				result += '\nBuild: ' + version.build; 
				result += '\nTotal: ' + version.totalBuilds; 
				
				/* var file:File = new File();
				file.nativePath = "D:\\MyWorks\\genieshout";				      
				file = file.resolvePath("version.txt"); */
				
				var file:File = File.applicationStorageDirectory.resolvePath("version.txt");
				
				var testFileStream:FileStream = new FileStream();   
				testFileStream.open(file, FileMode.WRITE);         
				testFileStream.writeUTF(result);         
				testFileStream.close();
			}
			
			private function exitChatEnterCheck(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER) 
				{
					button1_clickHandler(null) ;	
				}
			}
			
			private function joinChatEnterCheck(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER) 
				{
					button2_clickHandler(null) ;	
				}
			}
			
			protected function groupCombo_changeHandler(event:IndexChangeEvent):void
			{
				groupNameValue = groupCombo.selectedItem.name.toString() ;
				trace( "groupNameValue : " + groupNameValue );
			}
			 
			protected function button2_clickHandler(event:MouseEvent):void
			{
				this.close() ;
			}
			
			
			/*
			updated
			*/
			
			private var trayIcon:BitmapData; 
			import mx.events.CloseEvent;
			
			public function loadTrayIcon():void
			{
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, readyToTray);
				loader.load(new URLRequest("assets/icon_016.png"));
			}
			private function minToTray(event:Event):void{
				event.preventDefault();
				dock();
			}
			
			public function readyToTray(event:Event):void{
				trayIcon = event.target.content.bitmapData;
				
				var myMenu:NativeMenu = new NativeMenu();
				
				var openItem:NativeMenuItem = new NativeMenuItem("Open");
				var closeItem:NativeMenuItem = new NativeMenuItem("Close");
				
				openItem.addEventListener(Event.SELECT, unDock);
				closeItem.addEventListener(Event.SELECT, closeApp);
				
				myMenu.addItem(openItem);
				myMenu.addItem(new NativeMenuItem("", true));
				myMenu.addItem(closeItem);
				
				if(NativeApplication.supportsSystemTrayIcon){
					SystemTrayIcon(NativeApplication.nativeApplication.icon).tooltip = "GenieShout";
					
					SystemTrayIcon(NativeApplication.nativeApplication.icon).
						addEventListener(MouseEvent.CLICK, unDock);					
					stage.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, winMinimized);
					
					SystemTrayIcon(NativeApplication.nativeApplication.icon).menu = myMenu;
				}
			}
			
			private function winMinimized(displayStateEvent:NativeWindowDisplayStateEvent):void{
				if(displayStateEvent.afterDisplayState == NativeWindowDisplayState.MINIMIZED){
					displayStateEvent.preventDefault();
					dock();
				}
			}
			
			public function dock():void{
				stage.nativeWindow.visible = false;				
				NativeApplication.nativeApplication.icon.bitmaps = [trayIcon];
			}
			
			public function unDock(event:Event):void{
				stage.nativeWindow.visible = true;
				stage.nativeWindow.orderToFront();				
				NativeApplication.nativeApplication.icon.bitmaps = [];
			}
			
			private function closeApp(event:Event):void{
				stage.nativeWindow.close();
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{				
				writeVersionNumber();
				loadTrayIcon();		
				checkServerIP();				
				//	this.addEventListener(Event.CLOSING, minToTray);				
				joinChat.addEventListener(KeyboardEvent.KEY_DOWN, joinChatEnterCheck );
				joinChat.addEventListener(KeyboardEvent.KEY_DOWN, exitChatEnterCheck );					
			}
			
			protected function vbox1_showHandler(event:FlexEvent):void
			{
				if("true" == genieShoutDTO.remLogin)
				{
					groupNameValue = genieShoutDTO.groupName ;				
					var gpIndex:int = 0;
					for each(var gpObj:Object in groupName)
					{
						if(gpObj.name == genieShoutDTO.groupName)
						{
							break;
						}
						gpIndex++; 
					}					
					groupCombo.selectedIndex = gpIndex ; 
				}
				else
				{
					userName.text = "" ;
					groupCombo.selectedIndex = 0 ;
					rememberLogin.selected = false;
				}
			}
			
			protected function settingsButton_clickHandler(event:MouseEvent):void
			{
				var settingsPopUP:SettingsPage=SettingsPage(PopUpManager.createPopUp(this, SettingsPage, true));
				PopUpManager.centerPopUp(settingsPopUP);
			}
			
			protected function aboutButton_clickHandler(event:MouseEvent):void
			{
				var aboutPopUP:AboutPage=AboutPage(PopUpManager.createPopUp(this, AboutPage, true));
				PopUpManager.centerPopUp(aboutPopUP);
			}
		
			protected function rememberLogin_changeHandler(event:Event):void
			{				
				if(rememberLogin.selected) genieShoutDTO.remLogin = "true" ;
				else genieShoutDTO.remLogin = "false" ; 
			}

		]]>
	</fx:Script>
	
	<mx:Canvas width="100%" height="100%">
		
		<mx:constraintRows>
			<mx:ConstraintRow id="row1"
							  height="10%"/>
			<mx:ConstraintRow id="row2"
							  height="90%"/>
		</mx:constraintRows>
		<mx:Canvas height="100%"
				   verticalScrollPolicy="off"
				   backgroundColor="white"
				   horizontalScrollPolicy="off"
				   left="5"
				   right="5"
				   width="100%"
				   top="row1:0"
				   bottom="row1:0">
			<mx:constraintColumns>
				<mx:ConstraintColumn id="col1"
									 width="15%"/>
				<mx:ConstraintColumn id="col2"
									 width="60%"/>
				<mx:ConstraintColumn id="col3"
									 width="25%"/>
			</mx:constraintColumns>
			
			<mx:Image maintainAspectRatio="true"
					  smoothBitmapContent="true"
					  source="@Embed(source='assets/icon_128.png')"
					  left="col1:10"
					  right="col1:0"
					  height="100%"
					  top="3"/>
			
			<mx:Image maintainAspectRatio="true"
					  smoothBitmapContent="true"
					  source="@Embed(source='assets/appname.png')"
					  left="col2:0"
					  right="col2:0"
					  height="100%"
					  horizontalAlign="center"
					  top="5"/>
			
			<s:VGroup left="col3:0"
					  right="col3:0"
					  horizontalAlign="right"
					  verticalAlign="middle"
					  width="100%"
					  top="6"
					  >
				
				<mx:HBox horizontalAlign="right" right="40">
					<mx:LinkButton label="Setting" styleName="headerButtons" id="settingsButton" click="settingsButton_clickHandler(event)" />					
					<mx:LinkButton label="About" styleName="headerButtons" id="aboutButton" click="aboutButton_clickHandler(event)" />
				</mx:HBox>
				
			</s:VGroup>
			
		</mx:Canvas>
		<mx:VBox width="100%" height="100%" top="38" horizontalAlign="center" horizontalCenter="0" verticalAlign="middle">	
			<mx:ViewStack width="100%" height="100%" id="screenStack" >
				
				<mx:VBox width="100%" height="100%" label="Default Page" minHeight="0" 
						 horizontalAlign="center" verticalAlign="middle" show="vbox1_showHandler(event)" >			
					<mx:HBox width="100%" horizontalAlign="center">
						<mx:Label  text="User Name: " width="120" />
						<mx:TextInput id="userName" width="150" enabled="false" enter="button1_clickHandler(event)" restrict="A-Z0-9a-z" />
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="center">
						<mx:Label  text="Group Name: " width="120" />
						<s:DropDownList dataProvider="{groupName}" id="groupCombo" labelField="label"
									enabled="false" width="150" change="groupCombo_changeHandler(event)" />
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="center">
						<mx:Label  text="Remember Login: " width="120" />
						<s:CheckBox selected="{this.genieShoutDTO.remLogin}" width="150" id="rememberLogin" change="rememberLogin_changeHandler(event)" />
					</mx:HBox>
					<mx:Spacer /><mx:Spacer />
					<mx:HBox>
						<mx:Button  label="Join Chat" click="button1_clickHandler(event)" id="joinChat" />
						<mx:Button  label="Exit" click="button2_clickHandler(event)" id="exitChat" />
					</mx:HBox>
				</mx:VBox>
				
				<chat:ChatWindow height="100%" id="chatWindow" userName="{userName.text}" 
								 groupName="{groupNameValue}" ipAddress="{ipAddress}" width="100%" minHeight="0" />	
				
			</mx:ViewStack>
		</mx:VBox>	
	</mx:Canvas>
</s:WindowedApplication>
